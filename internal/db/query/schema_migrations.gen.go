// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bajra-manandhar17/personal-finance-app/internal/db/model"
)

func newSchema_migrations(db *gorm.DB, opts ...gen.DOOption) schema_migrations {
	_schema_migrations := schema_migrations{}

	_schema_migrations.schema_migrationsDo.UseDB(db, opts...)
	_schema_migrations.schema_migrationsDo.UseModel(&model.Schema_migrations{})

	tableName := _schema_migrations.schema_migrationsDo.TableName()
	_schema_migrations.ALL = field.NewAsterisk(tableName)
	_schema_migrations.Version = field.NewInt64(tableName, "version")
	_schema_migrations.Dirty = field.NewBool(tableName, "dirty")

	_schema_migrations.fillFieldMap()

	return _schema_migrations
}

type schema_migrations struct {
	schema_migrationsDo schema_migrationsDo

	ALL     field.Asterisk
	Version field.Int64
	Dirty   field.Bool

	fieldMap map[string]field.Expr
}

func (s schema_migrations) Table(newTableName string) *schema_migrations {
	s.schema_migrationsDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s schema_migrations) As(alias string) *schema_migrations {
	s.schema_migrationsDo.DO = *(s.schema_migrationsDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *schema_migrations) updateTableName(table string) *schema_migrations {
	s.ALL = field.NewAsterisk(table)
	s.Version = field.NewInt64(table, "version")
	s.Dirty = field.NewBool(table, "dirty")

	s.fillFieldMap()

	return s
}

func (s *schema_migrations) WithContext(ctx context.Context) ISchema_migrationsDo {
	return s.schema_migrationsDo.WithContext(ctx)
}

func (s schema_migrations) TableName() string { return s.schema_migrationsDo.TableName() }

func (s schema_migrations) Alias() string { return s.schema_migrationsDo.Alias() }

func (s schema_migrations) Columns(cols ...field.Expr) gen.Columns {
	return s.schema_migrationsDo.Columns(cols...)
}

func (s *schema_migrations) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *schema_migrations) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["version"] = s.Version
	s.fieldMap["dirty"] = s.Dirty
}

func (s schema_migrations) clone(db *gorm.DB) schema_migrations {
	s.schema_migrationsDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s schema_migrations) replaceDB(db *gorm.DB) schema_migrations {
	s.schema_migrationsDo.ReplaceDB(db)
	return s
}

type schema_migrationsDo struct{ gen.DO }

type ISchema_migrationsDo interface {
	gen.SubQuery
	Debug() ISchema_migrationsDo
	WithContext(ctx context.Context) ISchema_migrationsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISchema_migrationsDo
	WriteDB() ISchema_migrationsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISchema_migrationsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISchema_migrationsDo
	Not(conds ...gen.Condition) ISchema_migrationsDo
	Or(conds ...gen.Condition) ISchema_migrationsDo
	Select(conds ...field.Expr) ISchema_migrationsDo
	Where(conds ...gen.Condition) ISchema_migrationsDo
	Order(conds ...field.Expr) ISchema_migrationsDo
	Distinct(cols ...field.Expr) ISchema_migrationsDo
	Omit(cols ...field.Expr) ISchema_migrationsDo
	Join(table schema.Tabler, on ...field.Expr) ISchema_migrationsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISchema_migrationsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISchema_migrationsDo
	Group(cols ...field.Expr) ISchema_migrationsDo
	Having(conds ...gen.Condition) ISchema_migrationsDo
	Limit(limit int) ISchema_migrationsDo
	Offset(offset int) ISchema_migrationsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISchema_migrationsDo
	Unscoped() ISchema_migrationsDo
	Create(values ...*model.Schema_migrations) error
	CreateInBatches(values []*model.Schema_migrations, batchSize int) error
	Save(values ...*model.Schema_migrations) error
	First() (*model.Schema_migrations, error)
	Take() (*model.Schema_migrations, error)
	Last() (*model.Schema_migrations, error)
	Find() ([]*model.Schema_migrations, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Schema_migrations, err error)
	FindInBatches(result *[]*model.Schema_migrations, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Schema_migrations) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISchema_migrationsDo
	Assign(attrs ...field.AssignExpr) ISchema_migrationsDo
	Joins(fields ...field.RelationField) ISchema_migrationsDo
	Preload(fields ...field.RelationField) ISchema_migrationsDo
	FirstOrInit() (*model.Schema_migrations, error)
	FirstOrCreate() (*model.Schema_migrations, error)
	FindByPage(offset int, limit int) (result []*model.Schema_migrations, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISchema_migrationsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s schema_migrationsDo) Debug() ISchema_migrationsDo {
	return s.withDO(s.DO.Debug())
}

func (s schema_migrationsDo) WithContext(ctx context.Context) ISchema_migrationsDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s schema_migrationsDo) ReadDB() ISchema_migrationsDo {
	return s.Clauses(dbresolver.Read)
}

func (s schema_migrationsDo) WriteDB() ISchema_migrationsDo {
	return s.Clauses(dbresolver.Write)
}

func (s schema_migrationsDo) Session(config *gorm.Session) ISchema_migrationsDo {
	return s.withDO(s.DO.Session(config))
}

func (s schema_migrationsDo) Clauses(conds ...clause.Expression) ISchema_migrationsDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s schema_migrationsDo) Returning(value interface{}, columns ...string) ISchema_migrationsDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s schema_migrationsDo) Not(conds ...gen.Condition) ISchema_migrationsDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s schema_migrationsDo) Or(conds ...gen.Condition) ISchema_migrationsDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s schema_migrationsDo) Select(conds ...field.Expr) ISchema_migrationsDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s schema_migrationsDo) Where(conds ...gen.Condition) ISchema_migrationsDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s schema_migrationsDo) Order(conds ...field.Expr) ISchema_migrationsDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s schema_migrationsDo) Distinct(cols ...field.Expr) ISchema_migrationsDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s schema_migrationsDo) Omit(cols ...field.Expr) ISchema_migrationsDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s schema_migrationsDo) Join(table schema.Tabler, on ...field.Expr) ISchema_migrationsDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s schema_migrationsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISchema_migrationsDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s schema_migrationsDo) RightJoin(table schema.Tabler, on ...field.Expr) ISchema_migrationsDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s schema_migrationsDo) Group(cols ...field.Expr) ISchema_migrationsDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s schema_migrationsDo) Having(conds ...gen.Condition) ISchema_migrationsDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s schema_migrationsDo) Limit(limit int) ISchema_migrationsDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s schema_migrationsDo) Offset(offset int) ISchema_migrationsDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s schema_migrationsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISchema_migrationsDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s schema_migrationsDo) Unscoped() ISchema_migrationsDo {
	return s.withDO(s.DO.Unscoped())
}

func (s schema_migrationsDo) Create(values ...*model.Schema_migrations) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s schema_migrationsDo) CreateInBatches(values []*model.Schema_migrations, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s schema_migrationsDo) Save(values ...*model.Schema_migrations) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s schema_migrationsDo) First() (*model.Schema_migrations, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Schema_migrations), nil
	}
}

func (s schema_migrationsDo) Take() (*model.Schema_migrations, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Schema_migrations), nil
	}
}

func (s schema_migrationsDo) Last() (*model.Schema_migrations, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Schema_migrations), nil
	}
}

func (s schema_migrationsDo) Find() ([]*model.Schema_migrations, error) {
	result, err := s.DO.Find()
	return result.([]*model.Schema_migrations), err
}

func (s schema_migrationsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Schema_migrations, err error) {
	buf := make([]*model.Schema_migrations, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s schema_migrationsDo) FindInBatches(result *[]*model.Schema_migrations, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s schema_migrationsDo) Attrs(attrs ...field.AssignExpr) ISchema_migrationsDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s schema_migrationsDo) Assign(attrs ...field.AssignExpr) ISchema_migrationsDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s schema_migrationsDo) Joins(fields ...field.RelationField) ISchema_migrationsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s schema_migrationsDo) Preload(fields ...field.RelationField) ISchema_migrationsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s schema_migrationsDo) FirstOrInit() (*model.Schema_migrations, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Schema_migrations), nil
	}
}

func (s schema_migrationsDo) FirstOrCreate() (*model.Schema_migrations, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Schema_migrations), nil
	}
}

func (s schema_migrationsDo) FindByPage(offset int, limit int) (result []*model.Schema_migrations, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s schema_migrationsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s schema_migrationsDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s schema_migrationsDo) Delete(models ...*model.Schema_migrations) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *schema_migrationsDo) withDO(do gen.Dao) *schema_migrationsDo {
	s.DO = *do.(*gen.DO)
	return s
}
